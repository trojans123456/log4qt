log4qt.h 中
rootLogger  name和objectName为 root

logLogger   name和objectName为Log4Qt
用于记录内部消息的logger

qtLogger    name和objectName为 Qt
记录由qDebug() 等打印的信息

/**
FATAL      0
ERROR      3
WARN       4
INFO       6
DEBUG      7

DEBUG < INFO < WARN < ERROR < FATAL，
Log4j有一个规则：设置了级别为P，如果发生了一个级别Q比P高，则可以启动，否则屏蔽掉

*/

/**
   %p : 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
   %d : 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：  %d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
   %r : 输出自应用启动到输出该log信息耗费的毫秒数
   %c : 输出日志信息所属的类目，通常就是所在类的全名
   %t : 输出产生该日志事件的线程名
   %l : 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程， 以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
   %x : 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
   %% : 输出一个"%"字符
   %F : 输出日志消息产生时所在的文件名称
   %L : 输出代码中的行号
   %m : 输出代码中指定的消息,产生的日志具体信息
   %n : 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行
   %M : 代表方法的名字

*/


/**
// 获取 rootLogger
    Log4Qt::Logger *rootLogger = Log4Qt::Logger::rootLogger();
    Log4Qt::Logger *rootLogger2 = Log4Qt::LogManager::rootLogger();
    Log4Qt::Logger *rootLogger3 = Log4Qt::Logger::logger("");
    Log4Qt::Logger *rootLogger4 = Log4Qt::LogManager::logger("");
    Log4Qt::Logger *rootParentLogger = rootLogger->parentLogger();

    qDebug() << "********** rootLogger **********";
    qDebug() << rootLogger << rootLogger2 << rootLogger3 << rootLogger4;
    qDebug() << "name:" << rootLogger->name() << "object name:" << rootLogger->objectName();
    qDebug() << "parent logger:" << rootParentLogger;

    // 获取 logLogger
    Log4Qt::Logger *logLogger = Log4Qt::LogManager::logLogger();
    Log4Qt::Logger *logLogger2 = Log4Qt::Logger::logger("Log4Qt");
    Log4Qt::Logger *logLogger3 = Log4Qt::LogManager::logger("Log4Qt");
    Log4Qt::Logger *logParentLogger = logLogger->parentLogger();

    qDebug() << "********** logLogger **********";
    qDebug() << logLogger << logLogger2 << logLogger3;
    qDebug() << "name:" << logLogger->name() << "object name:" << logLogger->objectName();
    qDebug() << "parent logger:" << logParentLogger;

    // 获取 qtLogger
    Log4Qt::Logger *qtLogger = Log4Qt::LogManager::qtLogger();
    Log4Qt::Logger *qtLogger2 = Log4Qt::Logger::logger("Qt");
    Log4Qt::Logger *qtLogger3 = Log4Qt::LogManager::logger("Qt");
    Log4Qt::Logger *qtParentLogger = qtLogger->parentLogger();

    qDebug() << "********** qtLogger **********";
    qDebug() << qtLogger << qtLogger2 << qtLogger3;
    qDebug() << "name:" << qtLogger->name() << "object name:" << qtLogger->objectName();
    qDebug() << "parent logger:" << qtParentLogger;


*/
